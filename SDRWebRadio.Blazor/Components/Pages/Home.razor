@page "/"
@using SDRWebRadio.Shared.Models
@using SDRWebRadio.Shared.DTOs
@using SDRWebRadio.Blazor.Services
@inject ISdrApiService ApiService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>SDR WebRadio</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">
        <i class="fas fa-radio"></i> SDR WebRadio Control
    </h1>

    <!-- Device Status -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Device Status</h5>
                </div>
                <div class="card-body">
                    @if (devices?.Any() == true)
                    {
                        @foreach (var device in devices)
                        {
                            <div class="alert alert-@(device.Status == DeviceStatus.Connected ? "success" : "warning")" role="alert">
                                <strong>@device.Name</strong> - Status: @device.Status
                                <br />
                                <small>Serial: @device.SerialNumber | Last Updated: @device.LastUpdated.ToString("HH:mm:ss")</small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-warning" role="alert">
                            No SDR devices detected. Please ensure RTL-SDR dongle is connected.
                        </div>
                    }
                    
                    <button class="btn btn-outline-primary" @onclick="RefreshDevices" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                        }
                        Refresh Devices
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Radio Controls -->
    <div class="row mb-4">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Radio Controls</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- Frequency Control -->
                        <div class="col-md-4">
                            <label class="form-label">Frequency (MHz)</label>
                            <input type="number" @bind="frequency" @bind:event="oninput" 
                                   class="form-control" 
                                   min="@currentBandConfig.MinFrequency" 
                                   max="@currentBandConfig.MaxFrequency" 
                                   step="@currentBandConfig.Step" />
                            <div class="form-text">Range: @currentBandConfig.MinFrequency MHz - @currentBandConfig.MaxFrequency MHz</div>
                        </div>

                        <!-- Mode Selection -->
                        <div class="col-md-3">
                            <label class="form-label">Mode</label>
                            <select @bind="selectedMode" @bind:after="() => OnModeChanged(selectedMode)" class="form-select">
                                <option value="@RadioMode.FM">FM</option>
                                <option value="@RadioMode.AM">AM</option>
                                <option value="@RadioMode.SW">SW</option>
                            </select>
                        </div>

                        <!-- Gain Control -->
                        <div class="col-md-3">
                            <label class="form-label">Gain (dB)</label>
                            <input type="range" @bind="gain" @bind:event="oninput" 
                                   class="form-range" min="0" max="50" step="1" />
                            <div class="form-text">@gain dB</div>
                        </div>

                        <!-- Controls -->
                        <div class="col-md-2 d-flex align-items-end">
                            <button class="btn btn-primary w-100" @onclick="ApplySettings" disabled="@isLoading">
                                Apply
                            </button>
                        </div>
                    </div>

                    <!-- Preset Frequencies -->
                    <div class="mt-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="mb-0">Favorites</h6>
                            <button class="btn btn-outline-primary btn-sm" @onclick="AddCurrentToFavorites" disabled="@isLoading">
                                <i class="fas fa-star"></i> Add Current
                            </button>
                        </div>
                        @if (favorites.Any())
                        {
                            <div class="btn-group flex-wrap" role="group">
                                @foreach (var fav in favorites)
                                {
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-outline-secondary btn-sm" 
                                                @onclick="() => LoadFavorite(fav)">
                                            @fav.Name (@fav.Frequency.ToString("F2")) @fav.Mode
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm" 
                                                @onclick="() => RemoveFavorite(fav.Id)"
                                                title="Remove">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-muted small">No favorites yet. Click "Add Current" to save a station.</div>
                        }
                    </div>

                    <!-- Station Metadata -->
                    @if (currentBandConfig.SupportsMetadata && currentMetadata != null && isStreaming)
                    {
                        <div class="mt-3">
                            <h6>Station Information</h6>
                            <div class="card">
                                <div class="card-body">
                                    @if (!string.IsNullOrEmpty(currentMetadata.StationName))
                                    {
                                        <div><strong>Station:</strong> @currentMetadata.StationName</div>
                                    }
                                    @if (!string.IsNullOrEmpty(currentMetadata.ProgramService))
                                    {
                                        <div><strong>PS:</strong> @currentMetadata.ProgramService</div>
                                    }
                                    @if (!string.IsNullOrEmpty(currentMetadata.RadioText))
                                    {
                                        <div><strong>RT:</strong> @currentMetadata.RadioText</div>
                                    }
                                    @if (!string.IsNullOrEmpty(currentMetadata.Artist) || !string.IsNullOrEmpty(currentMetadata.Title))
                                    {
                                        <div><strong>Now Playing:</strong> @currentMetadata.Artist - @currentMetadata.Title</div>
                                    }
                                    <small class="text-muted">Updated: @currentMetadata.LastUpdated.ToString("HH:mm:ss")</small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Stream Control -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Stream Control</h5>
                </div>
                <div class="card-body text-center">
                    <div class="mb-3">
                        @if (isStreaming)
                        {
                            <div class="alert alert-success">
                                <i class="fas fa-play-circle"></i> Streaming Active
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-secondary">
                                <i class="fas fa-stop-circle"></i> Stream Stopped
                            </div>
                        }
                    </div>

                    <div class="d-grid gap-2">
                        @if (!isStreaming)
                        {
                            <button class="btn btn-success btn-lg" @onclick="StartStream" disabled="@isLoading">
                                <i class="fas fa-play"></i> Start Stream
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-danger btn-lg" @onclick="StopStream" disabled="@isLoading">
                                <i class="fas fa-stop"></i> Stop Stream
                            </button>
                        }
                    </div>

                    @if (isStreaming && audioStreamUrl != null)
                    {
                        <div class="mt-3">
                            <audio controls class="w-100">
                                <source src="@audioStreamUrl" type="audio/wav">
                                Your browser does not support the audio element.
                            </audio>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-@(isError ? "danger" : "info")" role="alert">
                    @statusMessage
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<SdrDevice>? devices = new();
    private double frequency = 100.1;
    private RadioMode selectedMode = RadioMode.FM;
    private RadioMode previousMode = RadioMode.FM;
    private int gain = 0;
    private bool isStreaming = false;
    private bool isLoading = false;
    private string? statusMessage;
    private bool isError = false;
    private string? audioStreamUrl;
    private RadioBandConfig currentBandConfig = RadioBandConfig.GetConfig(RadioMode.FM);
    private List<RadioFavorite> favorites = new();
    private StationMetadata? currentMetadata;

    protected override async Task OnInitializedAsync()
    {
        await RefreshDevices();
        await LoadCurrentSettings();
        await LoadFavorites();
    }

    private void OnModeChanged(RadioMode newMode)
    {
        if (newMode != selectedMode)
        {
            // Calculate the percentage position in the current band
            var oldConfig = RadioBandConfig.GetConfig(previousMode);
            var newConfig = RadioBandConfig.GetConfig(newMode);
            
            // Calculate percentage through the old band
            var percentage = (frequency - oldConfig.MinFrequency) / (oldConfig.MaxFrequency - oldConfig.MinFrequency);
            
            // Apply same percentage to new band
            frequency = newConfig.MinFrequency + (percentage * (newConfig.MaxFrequency - newConfig.MinFrequency));
            
            // Ensure frequency is within bounds and properly stepped
            frequency = Math.Max(newConfig.MinFrequency, Math.Min(newConfig.MaxFrequency, frequency));
            frequency = Math.Round(frequency / newConfig.Step) * newConfig.Step;
            
            previousMode = newMode;
            selectedMode = newMode;
            currentBandConfig = newConfig;
            
            StateHasChanged();
        }
    }

    private async Task RefreshDevices()
    {
        isLoading = true;
        try
        {
            var response = await ApiService.GetDevicesAsync();
            if (response.IsSuccess)
            {
                devices = response.Devices;
                SetStatusMessage($"Found {devices.Count} device(s)", false);
            }
            else
            {
                SetStatusMessage($"Error getting devices: {response.Message}", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCurrentSettings()
    {
        try
        {
            var response = await ApiService.GetCurrentSettingsAsync();
            if (response.IsSuccess && response.Data != null)
            {
                frequency = response.Data.Frequency / 1e6; // Convert Hz to MHz
                selectedMode = response.Data.Mode;
                previousMode = response.Data.Mode;
                currentBandConfig = RadioBandConfig.GetConfig(selectedMode);
                gain = response.Data.Gain;
                isStreaming = response.Data.IsStreaming;
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error loading settings: {ex.Message}", true);
        }
    }

    private async Task LoadFavorites()
    {
        try
        {
            var favoritesJson = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "radioFavorites");
            if (!string.IsNullOrEmpty(favoritesJson))
            {
                favorites = System.Text.Json.JsonSerializer.Deserialize<List<RadioFavorite>>(favoritesJson) ?? new();
            }
        }
        catch
        {
            // If localStorage fails, just use empty list
            favorites = new();
        }
    }

    private async Task SaveFavorites()
    {
        try
        {
            var favoritesJson = System.Text.Json.JsonSerializer.Serialize(favorites);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "radioFavorites", favoritesJson);
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error saving favorites: {ex.Message}", true);
        }
    }

    private async Task AddCurrentToFavorites()
    {
        var name = $"{selectedMode} {frequency:F2}";
        var favorite = new RadioFavorite
        {
            Name = name,
            Frequency = frequency,
            Mode = selectedMode
        };
        
        favorites.Add(favorite);
        await SaveFavorites();
        SetStatusMessage($"Added {name} to favorites", false);
    }

    private async Task RemoveFavorite(Guid id)
    {
        favorites.RemoveAll(f => f.Id == id);
        await SaveFavorites();
        SetStatusMessage("Favorite removed", false);
    }

    private void LoadFavorite(RadioFavorite favorite)
    {
        if (favorite.Mode != selectedMode)
        {
            previousMode = selectedMode;
            selectedMode = favorite.Mode;
            currentBandConfig = RadioBandConfig.GetConfig(selectedMode);
        }
        frequency = favorite.Frequency;
        SetStatusMessage($"Loaded favorite: {favorite.Name}", false);
    }

    private async Task ApplySettings()
    {
        isLoading = true;
        try
        {
            var settings = new RadioSettingsRequest
            {
                Frequency = frequency * 1e6, // Convert MHz to Hz
                Mode = selectedMode,
                Gain = gain
            };

            var response = await ApiService.SetRadioSettingsAsync(settings);
            if (response.IsSuccess)
            {
                SetStatusMessage("Settings applied successfully", false);
            }
            else
            {
                SetStatusMessage($"Error applying settings: {response.Message}", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task StartStream()
    {
        isLoading = true;
        try
        {
            var settings = new RadioSettingsRequest
            {
                Frequency = frequency * 1e6, // Convert MHz to Hz
                Mode = selectedMode,
                Gain = gain
            };

            var response = await ApiService.StartStreamAsync(settings);
            if (response.IsSuccess)
            {
                isStreaming = true;
                audioStreamUrl = response.Stream?.StreamUrl;
                SetStatusMessage("Stream started successfully", false);
            }
            else
            {
                SetStatusMessage($"Error starting stream: {response.Message}", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task StopStream()
    {
        isLoading = true;
        try
        {
            var response = await ApiService.StopStreamAsync();
            if (response.IsSuccess)
            {
                isStreaming = false;
                audioStreamUrl = null;
                SetStatusMessage("Stream stopped successfully", false);
            }
            else
            {
                SetStatusMessage($"Error stopping stream: {response.Message}", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetStatusMessage(string message, bool error)
    {
        statusMessage = message;
        isError = error;
        StateHasChanged();
    }
}
