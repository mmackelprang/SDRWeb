@page "/"
@using SDRWebRadio.Shared.Models
@using SDRWebRadio.Shared.DTOs
@using SDRWebRadio.Blazor.Services
@inject ISdrApiService ApiService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>SDR WebRadio</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">
        <i class="fas fa-radio"></i> SDR WebRadio Control
    </h1>

    <!-- Device Status -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Device Status</h5>
                </div>
                <div class="card-body">
                    @if (devices?.Any() == true)
                    {
                        @foreach (var device in devices)
                        {
                            <div class="alert alert-@(device.Status == DeviceStatus.Connected ? "success" : "warning")" role="alert">
                                <strong>@device.Name</strong> - Status: @device.Status
                                <br />
                                <small>Serial: @device.SerialNumber | Last Updated: @device.LastUpdated.ToString("HH:mm:ss")</small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-warning" role="alert">
                            No SDR devices detected. Please ensure RTL-SDR dongle is connected.
                        </div>
                    }
                    
                    <button class="btn btn-outline-primary" @onclick="RefreshDevices" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                        }
                        Refresh Devices
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Radio Controls -->
    <div class="row mb-4">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Radio Controls</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- Frequency Control -->
                        <div class="col-md-4">
                            <label class="form-label">Frequency (MHz)</label>
                            <input type="number" @bind="frequency" @bind:event="oninput" 
                                   class="form-control" min="24" max="1766" step="0.1" />
                            <div class="form-text">Range: 24MHz - 1766MHz</div>
                        </div>

                        <!-- Mode Selection -->
                        <div class="col-md-3">
                            <label class="form-label">Mode</label>
                            <select @bind="selectedMode" class="form-select">
                                <option value="@RadioMode.FM">FM</option>
                                <option value="@RadioMode.AM">AM</option>
                                <option value="@RadioMode.SW">SW</option>
                            </select>
                        </div>

                        <!-- Gain Control -->
                        <div class="col-md-3">
                            <label class="form-label">Gain (dB)</label>
                            <input type="range" @bind="gain" @bind:event="oninput" 
                                   class="form-range" min="0" max="50" step="1" />
                            <div class="form-text">@gain dB</div>
                        </div>

                        <!-- Controls -->
                        <div class="col-md-2 d-flex align-items-end">
                            <button class="btn btn-primary w-100" @onclick="ApplySettings" disabled="@isLoading">
                                Apply
                            </button>
                        </div>
                    </div>

                    <!-- Preset Frequencies -->
                    <div class="mt-3">
                        <h6>FM Presets</h6>
                        <div class="btn-group" role="group">
                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => SetPreset(88.5, RadioMode.FM)">88.5</button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => SetPreset(95.5, RadioMode.FM)">95.5</button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => SetPreset(100.1, RadioMode.FM)">100.1</button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => SetPreset(104.3, RadioMode.FM)">104.3</button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => SetPreset(107.9, RadioMode.FM)">107.9</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stream Control -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Stream Control</h5>
                </div>
                <div class="card-body text-center">
                    <div class="mb-3">
                        @if (isStreaming)
                        {
                            <div class="alert alert-success">
                                <i class="fas fa-play-circle"></i> Streaming Active
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-secondary">
                                <i class="fas fa-stop-circle"></i> Stream Stopped
                            </div>
                        }
                    </div>

                    <div class="d-grid gap-2">
                        @if (!isStreaming)
                        {
                            <button class="btn btn-success btn-lg" @onclick="StartStream" disabled="@isLoading">
                                <i class="fas fa-play"></i> Start Stream
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-danger btn-lg" @onclick="StopStream" disabled="@isLoading">
                                <i class="fas fa-stop"></i> Stop Stream
                            </button>
                        }
                    </div>

                    @if (isStreaming && audioStreamUrl != null)
                    {
                        <div class="mt-3">
                            <audio controls class="w-100">
                                <source src="@audioStreamUrl" type="audio/wav">
                                Your browser does not support the audio element.
                            </audio>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-@(isError ? "danger" : "info")" role="alert">
                    @statusMessage
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<SdrDevice>? devices = new();
    private double frequency = 100.1;
    private RadioMode selectedMode = RadioMode.FM;
    private int gain = 0;
    private bool isStreaming = false;
    private bool isLoading = false;
    private string? statusMessage;
    private bool isError = false;
    private string? audioStreamUrl;

    protected override async Task OnInitializedAsync()
    {
        await RefreshDevices();
        await LoadCurrentSettings();
    }

    private async Task RefreshDevices()
    {
        isLoading = true;
        try
        {
            var response = await ApiService.GetDevicesAsync();
            if (response.IsSuccess)
            {
                devices = response.Devices;
                SetStatusMessage($"Found {devices.Count} device(s)", false);
            }
            else
            {
                SetStatusMessage($"Error getting devices: {response.Message}", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCurrentSettings()
    {
        try
        {
            var response = await ApiService.GetCurrentSettingsAsync();
            if (response.IsSuccess && response.Data != null)
            {
                frequency = response.Data.Frequency / 1e6; // Convert Hz to MHz
                selectedMode = response.Data.Mode;
                gain = response.Data.Gain;
                isStreaming = response.Data.IsStreaming;
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error loading settings: {ex.Message}", true);
        }
    }

    private async Task ApplySettings()
    {
        isLoading = true;
        try
        {
            var settings = new RadioSettingsRequest
            {
                Frequency = frequency * 1e6, // Convert MHz to Hz
                Mode = selectedMode,
                Gain = gain
            };

            var response = await ApiService.SetRadioSettingsAsync(settings);
            if (response.IsSuccess)
            {
                SetStatusMessage("Settings applied successfully", false);
            }
            else
            {
                SetStatusMessage($"Error applying settings: {response.Message}", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task StartStream()
    {
        isLoading = true;
        try
        {
            var settings = new RadioSettingsRequest
            {
                Frequency = frequency * 1e6, // Convert MHz to Hz
                Mode = selectedMode,
                Gain = gain
            };

            var response = await ApiService.StartStreamAsync(settings);
            if (response.IsSuccess)
            {
                isStreaming = true;
                audioStreamUrl = response.Stream?.StreamUrl;
                SetStatusMessage("Stream started successfully", false);
            }
            else
            {
                SetStatusMessage($"Error starting stream: {response.Message}", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task StopStream()
    {
        isLoading = true;
        try
        {
            var response = await ApiService.StopStreamAsync();
            if (response.IsSuccess)
            {
                isStreaming = false;
                audioStreamUrl = null;
                SetStatusMessage("Stream stopped successfully", false);
            }
            else
            {
                SetStatusMessage($"Error stopping stream: {response.Message}", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetPreset(double freq, RadioMode mode)
    {
        frequency = freq;
        selectedMode = mode;
    }

    private void SetStatusMessage(string message, bool error)
    {
        statusMessage = message;
        isError = error;
        StateHasChanged();
    }
}
